# source: https://eu1.prisma.sh/muhammad-muneeb-akhlaq/url_shortner/dev
# timestamp: Fri Oct 25 2019 10:26:03 GMT+0500 (Pakistan Standard Time)

type AggregateURL {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createURL(data: URLCreateInput!): URL!
  updateURL(data: URLUpdateInput!, where: URLWhereUniqueInput!): URL
  deleteURL(where: URLWhereUniqueInput!): URL
  upsertURL(where: URLWhereUniqueInput!, create: URLCreateInput!, update: URLUpdateInput!): URL!
  updateManyURLs(data: URLUpdateManyMutationInput!, where: URLWhereInput): BatchPayload!
  deleteManyURLs(where: URLWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  uRLs(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL]!
  uRL(where: URLWhereUniqueInput!): URL
  uRLsConnection(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): URLConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  uRL(where: URLSubscriptionWhereInput): URLSubscriptionPayload
}

type URL implements Node {
  id: ID!
  longURL: String!
  shortURLcode: String
}

"""A connection to a list of items."""
type URLConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [URLEdge]!
  aggregate: AggregateURL!
}

input URLCreateInput {
  id: ID
  longURL: String!
  shortURLcode: String
}

"""An edge in a connection."""
type URLEdge {
  """The item at the end of the edge."""
  node: URL!

  """A cursor for use in pagination."""
  cursor: String!
}

enum URLOrderByInput {
  id_ASC
  id_DESC
  longURL_ASC
  longURL_DESC
  shortURLcode_ASC
  shortURLcode_DESC
}

type URLPreviousValues {
  id: ID!
  longURL: String!
  shortURLcode: String
}

type URLSubscriptionPayload {
  mutation: MutationType!
  node: URL
  updatedFields: [String!]
  previousValues: URLPreviousValues
}

input URLSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [URLSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [URLSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [URLSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: URLWhereInput
}

input URLUpdateInput {
  longURL: String
  shortURLcode: String
}

input URLUpdateManyMutationInput {
  longURL: String
  shortURLcode: String
}

input URLWhereInput {
  """Logical AND on all given filters."""
  AND: [URLWhereInput!]

  """Logical OR on all given filters."""
  OR: [URLWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [URLWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  longURL: String

  """All values that are not equal to given value."""
  longURL_not: String

  """All values that are contained in given list."""
  longURL_in: [String!]

  """All values that are not contained in given list."""
  longURL_not_in: [String!]

  """All values less than the given value."""
  longURL_lt: String

  """All values less than or equal the given value."""
  longURL_lte: String

  """All values greater than the given value."""
  longURL_gt: String

  """All values greater than or equal the given value."""
  longURL_gte: String

  """All values containing the given string."""
  longURL_contains: String

  """All values not containing the given string."""
  longURL_not_contains: String

  """All values starting with the given string."""
  longURL_starts_with: String

  """All values not starting with the given string."""
  longURL_not_starts_with: String

  """All values ending with the given string."""
  longURL_ends_with: String

  """All values not ending with the given string."""
  longURL_not_ends_with: String
  shortURLcode: String

  """All values that are not equal to given value."""
  shortURLcode_not: String

  """All values that are contained in given list."""
  shortURLcode_in: [String!]

  """All values that are not contained in given list."""
  shortURLcode_not_in: [String!]

  """All values less than the given value."""
  shortURLcode_lt: String

  """All values less than or equal the given value."""
  shortURLcode_lte: String

  """All values greater than the given value."""
  shortURLcode_gt: String

  """All values greater than or equal the given value."""
  shortURLcode_gte: String

  """All values containing the given string."""
  shortURLcode_contains: String

  """All values not containing the given string."""
  shortURLcode_not_contains: String

  """All values starting with the given string."""
  shortURLcode_starts_with: String

  """All values not starting with the given string."""
  shortURLcode_not_starts_with: String

  """All values ending with the given string."""
  shortURLcode_ends_with: String

  """All values not ending with the given string."""
  shortURLcode_not_ends_with: String
}

input URLWhereUniqueInput {
  id: ID
  longURL: String
  shortURLcode: String
}
